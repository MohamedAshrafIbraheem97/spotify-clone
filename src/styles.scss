// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;

// import our custom theme
@import "../src/app/styles/themes/light-theme.scss";
@import "../src/app/styles/themes/dark-theme.scss";

// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// always include only once per project
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
// $spotify-clone-primary: mat.define-palette(mat.$indigo-palette);
// // $spotify-clone-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);
// // $spotify-clone-primary: #1db954;
// $spotify-clone-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// // The warn palette is optional (defaults to red).
// $spotify-clone-warn: mat.define-palette(mat.$red-palette);

// // Create the theme object. A theme consists of configurations for individual
// // theming systems such as "color" or "typography".
// $spotify-clone-theme: mat.define-light-theme(
//   (
//     color: (
//       primary: $primary-color,
//       accent: $secondary-color,
//       warn: $black-color,
//     ),
//   )
// );

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
// @include mat.all-component-themes($spotify-clone-theme);

@import "@angular/material/theming";

$primary-light: mat.define-palette($primary-color-map, 500, 300, 700, 900);
$accent-light: mat.define-palette($accent-color-map, 500, 300, 700, 900);

// The "warn" palette is optional and defaults to red if not specified.
$warn-light: mat.define-palette($warn-color-map);

$dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: $primary-light,
      accent: $dark-color-map,
      warn: $warn-color-map,
    ),
    // typography: mat.define-typography-config(),
    // density: 0,,,
  )
);

$light-theme: mat.define-light-theme(
  (
    color: (
      primary: $primary-light,
      accent: $accent-color-map,
      warn: $warn-color-map,
    ),
    typography: mat.define-typography-config(),
    density: 0,
  )
);

// Emit theme-dependent styles for common features used across multiple components.
@include mat.core-theme($dark-theme);

// Emit styles for MatButton based on `$light-theme`. Because the configuration
// passed to `define-light-theme` omits typography, `button-theme` will not
// emit any typography styles.
@include mat.all-component-themes($dark-theme);

// // Apply the light theme only when the user prefers light themes.
// @media (prefers-color-scheme: light) {
//   // Use the `-color` mixins to only apply color styles without reapplying the same
//   // typography and density styles.
//   @include mat.core-color($light-theme);
//   @include mat.button-color($light-theme);
// }
// Include the theme mixins for other components you use here.

// theming for non angular material themes
// @function map-get-value($map, $key) {
//   @if map-has-key($map, $key) {
//     @return map-get($map, $key);
//   } @else {
//     @error "ERROR: Specified key #{$key} does not exist in the mapping #{map-get($map,name)}";
//   }
// }

// @mixin set-theme($theme-color-map) {
//   .layout {
//     background-color: map-get-value($theme-color-map, background-color);
//   }

//   p,
//   a,
//   label {
//     color: map-get-value($theme-color-map, text-color);
//   }
//   .button {
//     // background-color: map-get-value($theme-color-map, button-color);
//     // color: map-get-value($theme-color-map, button-text-color);
//   }
// }

// .light-theme {
//   // @include set-theme($light-theme-map);
// }

// .dark-theme {
//   // @include set-theme($dark-theme-map);
// }

html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}
